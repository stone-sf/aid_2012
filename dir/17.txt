前情回顾

1. IO  模型

   阻塞IO    非阻塞IO    IO多路复用

2. 阻塞IO

   阻塞原因： 阻塞函数   传输过程阻塞

   效率低  使用简单

3. 非阻塞IO

   将阻塞--》不阻塞

   setblocking()
   settimeout() 超时检测

4. IO多路复用

   利用系统监控IO
   哪个IO需要处理（应用层处理时函数不会阻塞）返回给应用层
   应用层判断是那个IO可以处理，进行对应处理操作


   sock  connfd1  connfd2 .....

   对比：
   select : 跨平台好  同时监控IO数量1024  效率不高
   epoll  : 只支持Linux  同时监控IO无限制 效率高



练习01：
将网页 my.html 通过浏览器访问显示出来

web server 服务程序

主要功能 ：
    接收客户端（浏览器）请求
    解析客户端发送的请求
    根据请求组织数据内容
    将数据内容形成http响应格式返回给浏览器

特点 ：
    采用IO并发，可以满足多个客户端同时发起请求情况
    通过类接口形式进行功能封装
    做基本的请求解析，根据具体请求返回具体内容，同时可以满足客户端的网页效果加载

技术点 ： tcp  http协议  select

写一个类完成工能封装

面向对象进行代码设计

cookie: 接口开发

    在使用者的角度，先想怎么用

    socket() --> udp套接字 tcp套接字
       将功能组合

    Proces() --> 进程对象
       封装内容比较全面，个人使用简单

    * 使用流程
    * 哪些是需要用户自己决定的


多进程多线程并发 & IO并发模型

多进程多线程并发 ： 整体框架

IO并发模型： 任务比较小，IO处理，短时间处理

后端核心编程部分总结

1. 网络通信

   网络基础知识
   tcp套接字编程 （重点）
   udp套接字编程 （重点）

   理论问题： 1.OSI七层模型 和 TCP/IP模型
            2.三次握手和四次挥手
            3.tcp和udp传输的区别

2. 进程线程

   进程的概念
   进程的创建 （重点，难点）
   线程的创建 （重点）
   线程基本概念 ： 同步互斥  GIL

   理论问题 ： 对比进程和线程

3. IO

   阻塞IO 非阻塞IO
   IO多路复用: select epoll （重点，难点）

   理论问题 ： HTTP协议和网页访问过程

4. 并发网络模型

   多进程多线程模型 （重点）

   IO并发模型 （重点）

5. 综合代码

   * 聊天室 ： udp套接字，进程  循环网络模型
   * ftp文件服务 ： tcp套接字  多线程并发模型
   * webserver ： tcp + http  io并发模型

《图解HTTP》
《图解TCP/IP》
《Python核心编程 第三版》

精通后端常见编程方法，如套接字，进程线程，IO模型


作业： 1. 第二阶段知识体系梳理总结 xmind
      2. webserver自己写一下

